// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  provider, provider_user_id, email, profile_picture
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, provider, provider_user_id, email, profile_picture, created_at, updated_at
`

type CreateUserParams struct {
	Provider       string      `db:"provider"`
	ProviderUserID string      `db:"provider_user_id"`
	Email          string      `db:"email"`
	ProfilePicture pgtype.Text `db:"profile_picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Provider,
		arg.ProviderUserID,
		arg.Email,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, provider, provider_user_id, email, profile_picture, created_at, updated_at FROM "user"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT id, provider, provider_user_id, email, profile_picture, created_at, updated_at FROM "user"
WHERE provider = $1 AND provider_user_id = $2
LIMIT 1
`

type GetUserByProviderParams struct {
	Provider       string `db:"provider"`
	ProviderUserID string `db:"provider_user_id"`
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByProvider, arg.Provider, arg.ProviderUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, provider, provider_user_id, email, profile_picture, created_at, updated_at FROM "user"
ORDER BY created_at
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.ProviderUserID,
			&i.Email,
			&i.ProfilePicture,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET provider = $1,
provider_user_id = $2,
email = $3,
profile_picture = $4,
updated_at = CURRENT_TIMESTAMP
WHERE id = $5
`

type UpdateUserParams struct {
	Provider       string      `db:"provider"`
	ProviderUserID string      `db:"provider_user_id"`
	Email          string      `db:"email"`
	ProfilePicture pgtype.Text `db:"profile_picture"`
	ID             int32       `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Provider,
		arg.ProviderUserID,
		arg.Email,
		arg.ProfilePicture,
		arg.ID,
	)
	return err
}
