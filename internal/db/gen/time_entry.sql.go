// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_entry.sql

package db

import (
	"context"
	"time"
)

const createTimeEntry = `-- name: CreateTimeEntry :one
INSERT INTO time_entry (
  project_id, start_time, end_time, description
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, project_id, start_time, end_time, duration, description, created_at, updated_at
`

type CreateTimeEntryParams struct {
	ProjectID   int64     `db:"project_id"`
	StartTime   time.Time `db:"start_time"`
	EndTime     time.Time `db:"end_time"`
	Description string    `db:"description"`
}

func (q *Queries) CreateTimeEntry(ctx context.Context, arg CreateTimeEntryParams) (TimeEntry, error) {
	row := q.db.QueryRowContext(ctx, createTimeEntry,
		arg.ProjectID,
		arg.StartTime,
		arg.EndTime,
		arg.Description,
	)
	var i TimeEntry
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTimeEntry = `-- name: DeleteTimeEntry :exec
DELETE FROM time_entry
WHERE id = ?
`

func (q *Queries) DeleteTimeEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTimeEntry, id)
	return err
}

const getTimeEntry = `-- name: GetTimeEntry :one
SELECT id, project_id, start_time, end_time, duration, description, created_at, updated_at FROM time_entry
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTimeEntry(ctx context.Context, id int64) (TimeEntry, error) {
	row := q.db.QueryRowContext(ctx, getTimeEntry, id)
	var i TimeEntry
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTimeEntries = `-- name: ListTimeEntries :many
SELECT id, project_id, start_time, end_time, duration, description, created_at, updated_at FROM time_entry
ORDER BY start_time
`

func (q *Queries) ListTimeEntries(ctx context.Context) ([]TimeEntry, error) {
	rows, err := q.db.QueryContext(ctx, listTimeEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TimeEntry
	for rows.Next() {
		var i TimeEntry
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.StartTime,
			&i.EndTime,
			&i.Duration,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimeEntry = `-- name: UpdateTimeEntry :exec
UPDATE time_entry
SET start_time = ?,
end_time = ?,
description = ?
WHERE id = ?
`

type UpdateTimeEntryParams struct {
	StartTime   time.Time `db:"start_time"`
	EndTime     time.Time `db:"end_time"`
	Description string    `db:"description"`
	ID          int64     `db:"id"`
}

func (q *Queries) UpdateTimeEntry(ctx context.Context, arg UpdateTimeEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateTimeEntry,
		arg.StartTime,
		arg.EndTime,
		arg.Description,
		arg.ID,
	)
	return err
}
